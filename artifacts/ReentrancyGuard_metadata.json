{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			}
		],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
			"errors": {
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contract/MyDEX_flattened.sol": "ReentrancyGuard"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contract/MyDEX_flattened.sol": {
			"keccak256": "0xa8fbe881121ade1f82281014e3eb9967ccae148dc316644ebf382eb4dbb093fd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1277558dcee1b1e1865d69281910894fb4a7cd4d2247af3046d2f3ae0ff55636",
				"dweb:/ipfs/QmSngSv2aVV6DRWJADvqYJ398y4jEoh9HCQE9hAaU4NbUM"
			]
		}
	},
	"version": 1
}